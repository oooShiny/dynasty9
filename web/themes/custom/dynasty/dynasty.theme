<?php

use Drupal\node\Entity\Node;
use Drupal\Core\Form\FormStateInterface;
use Drupal\dynasty_module\DynastyHelpers;

function dynasty_theme_suggestions_node_alter(&$suggestions, $variables) {
  // Create custom front page node template.
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $suggestions[] = 'node__front';
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function dynasty_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dynasty_preprocess_node(&$variables) {

  $node = $variables['node'];
  /**
   * Game Node Overrides.
   */
  if ($node->bundle() == 'game') {
    if ($node->get('field_ot')->value == '0') {
      $variables['ot'] = FALSE;
    }
    else {
      $variables['ot'] = TRUE;
    }
    if ($node->get('field_home_away')->value == "Home") {
      $variables['vs'] = 'vs';
    }
    else {
      $variables['vs'] = 'at';
    }
    $game_season = $node->get('field_season')->value;

    // Team name variations.
    $opp = Node::load($node->get('field_opponent')->target_id);
    $variables['team_css'] =  str_replace(' ', '-', strtolower($opp->label()));
    $opp_name = _check_name_alts($opp, $game_season);
    $name_array = explode(' ', $opp_name);

    $team_short = end($name_array);
    $variables['opp_short'] = $team_short;
    $variables['opp_name'] = $opp_name;


    // Create pro-football-reference and NFL Gamepass links.
    $game_date = new DateTime($node->get('field_date')->value);
    $pfr_date = $game_date->format('Ymd');
    $gp_date = $game_date->format('mdY');
    $gp_opp = explode(' ', $opp->getTitle());
    if ($node->get('field_home_away')->value == 'Home') {
      $pfr_home = 'nwe';
      $gp_home = 'patriots';
      $gp_away = strtolower(end($gp_opp));
      $variables['schema_city'] = 'Foxboro';
      $variables['schema_state'] = 'MA';
    }
    else {
      $pfr_home = $opp->get('field_pfr_id')->value;
      $gp_home = strtolower(end($gp_opp));
      $gp_away = 'patriots';
      $game_location = _get_team_location(strtolower($team_short));
      $variables['schema_city'] = $game_location['city'];
      $variables['schema_state'] = $game_location['state'];
    }
    $variables['pfr_link'] = 'https://www.pro-football-reference.com/boxscores/' . $pfr_date . '0' . $pfr_home . '.htm';
    $variables['season'] = intval($game_season);
    $variables['gamepass_link'] = 'https://gamepass.nfl.com/game/'.$gp_away.'-at-'.$gp_home.'-on-' . $gp_date;

    // Schema.org formatting.
    $variables['schema_date'] = $game_date->format('c');
    $variables['schema_opp'] = $opp->label();
    $variables['schema_name'] = $node->label();

    // Multiple QB stats.
    if (!$node->get('field_other_qbs')->isEmpty()) {
      foreach ($node->field_other_qbs->referencedEntities() as $qb) {
        $qb_node = Node::load($qb->field_qb->target_id);

        $qbs[$qb_node->label()] = [
          'url' => $qb_node->toUrl(),
          'att' => $qb->field_attempts->value,
          'comp' => $qb->field_completions->value,
          'yds' => $qb->field_yards->value,
          'tds' => $qb->field_tds->value,
          'ints' => $qb->field_ints->value,
          'qbr' => $qb->field_qbr->value,
        ];
      }
      $variables['qbs'] = $qbs;
    }
  }
  /**
   * Podcast Episode Overrides.
   */
  if ($node->bundle() == 'podcast_episode') {
    $variables['ep_art'] = $node->get('field_episode_cover_image')->value;
    $downloads = [];
    foreach ($node->field_monthly_downloads as $paragraph) {
      $dl = $paragraph->entity;
      $dateObj   = DateTime::createFromFormat('!m', $dl->field_month->value);
      $monthName = $dateObj->format('F');
      $downloads[$dl->field_year->value][$dl->field_month->value] = [
        'dls' => $dl->field_downloads->value,
        'month_name' => $monthName
      ];
    }
    // Sort downloads by month.
    $sorted_dls = [];
    foreach ($downloads as $year => $month) {
      ksort($month);
      $sorted_dls[$year] = $month;
    }
    // Sort downloads by year.
    ksort($sorted_dls);
    $variables['downloads'] = $sorted_dls;
  }

  /**
   * Highlight Overrides.
   */
  if ($node->bundle() == 'highlight') {
    $variables['video_file'] = $node->get('field_video_file_id')->value;
    $variables['muse_id'] = $node->get('field_muse_video_id')->value;
  }

  /**
   * Player Page Overrides.
   */
  if ($node->bundle() == 'player') {
    $variables['#attached']['library'][] =  'dynasty/muse_video';
    $names = explode(' ', $node->label());
    $variables['lastname'] = end($names);
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function dynasty_preprocess_page_title(&$variables) {

  $node = \Drupal::request()->attributes->get('node');

  if ($node && $node->bundle() == 'player') {
    $positions = DynastyHelpers::get_positions();
    $player_pos = $positions[$node->get('field_player_position')->target_id];
    $variables['title'] = t('@title (@pos)', [
      '@title' => $node->getTitle(),
      '@pos' => $player_pos,
    ]);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dynasty_preprocess_field(&$variables, $hook) {
  // Game Video field.
  if ($variables['field_name'] == 'field_game_video') {
    for ($i = 0; $i < 4; $i++) {
      if (isset($variables['element'][$i])) {
        $url = parse_url($variables['element'][$i]['#context']['value']);
        $path = explode('/', $url['path']);
        $variables['video'][] = [
          'video_type' => $url['host'],
          'video_id' => end($path)
        ];
      }
    }
  }
  // Podcast MP3 field.
  if ($variables['field_name'] == 'field_mp3') {
    $link_array = parse_url($variables['element'][0]['#context']['value']);
    $path_array = explode('/', $link_array['path']);
    $variables['mp3'] = $path_array[6];
    $variables['mp3_url'] = $variables['element'][0]['#context']['value'];
    $variables['view_mode'] = $variables['element']['#view_mode'];
  }
}

/**
 * Implements template_preprocess_form().
 */
function dynasty_preprocess_form(&$variables) {
  $flex_forms = [
    'season-select-form',
    'player-select-form',
    'views-exposed-form-game-search-page-1',
    'views-exposed-form-highlight-search-page-1',
  ];
  if (in_array($variables['attributes']['id'], $flex_forms)) {
    $variables['attributes']['class'][] = 'tw-flex tw-spacing-between tw-justify-center';
  }
}

function dynasty_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $id = $form['#id'];
  $forms = [
    'views-exposed-form-game-search-page-1',
    'views-exposed-form-highlight-search-page-1',
  ];
  if (in_array($id, $forms)) {
    $form['#info']['filter-search_api_fulltext']['label'] = '';

  }
}

function dynasty_preprocess_input(&$variables) {
  $element = $variables['element'];
  // Adding classes to search text box since Drupal won't recognize the
  // input--edit-search.html.twig file.
  if (strpos($element['#id'], 'edit-search') !== FALSE && $element['#type'] == 'textfield') {
    $variables['attributes']['class'][] = 'tw-h-12';
  }

}


function dynasty_preprocess_views_view_table(&$variables) {
  $view = $variables['view'];

  if ($view->id() == 'game_search') {
    $wins = 0;
    $losses = 0;
    $score = [
      'pats' => 0,
      'opp' => 0
    ];
    $games = 0;
    foreach ($view->result as $id => $row) {
      // Check for alternate team names for this row.
      $season = $row->_entity->field_season->value;
      $opp = $row->_entity->field_opponent->referencedEntities();
      $opp_name = _check_name_alts($opp[0], $season);
      $markup = $variables['rows'][$id]['columns']['opponent']['content'][0]['field_output']['#markup']->__toString();
      $href_array = explode('"', $markup);
      $new_markup = '<a href="' . $href_array[1] . '" hreflang="en">' . $opp_name . '</a>';
      $variables['rows'][$id]['columns']['opponent']['content'][0]['field_output'] = Drupal\Core\Render\Markup::create($new_markup);

      // Add game results/scores to totals.
      foreach ($view->field as $fid => $field) {
        switch ($fid) {
          case 'result':
            $winloss = $field->getValue($row);
            if ($winloss == 'Loss') {
              $losses++;
            }
            elseif ($winloss == 'Win') {
              $wins++;
            }
            $games++;
            break;
          case 'opponent_score':
            $score['opp'] += $field->getValue($row);
            break;
          case 'patriots_score':
            $score['pats'] += $field->getValue($row);
            break;
        }
      }
    }
    // Get averages and totals.
    $variables['winloss'] = $wins . ' - ' . $losses;
    $variables['winpct'] = $wins/($games);
    $avgscore = [
      'pats' => $score['pats']/$games,
      'opp' => $score['opp']/$games,
    ];
    $variables['avgscore'] = round($avgscore['pats']) . ' - ' . round($avgscore['opp']);
  }

}

function _get_team_location($team) {
$locations = [
  'cardinals' => ['city' => 'Glendale' , 'state' => 'AZ'],
  'falcons' => ['city' => 'Atlanta' , 'state' => 'GA'],
  'ravens' => ['city' => 'Baltimore' , 'state' => 'MD'],
  'bills' => ['city' => 'Orchard Park' , 'state' => 'NY'],
  'panthers' => ['city' => 'Charlotte' , 'state' => 'NC'],
  'bears' => ['city' => 'Chicago' , 'state' => 'IL'],
  'bengals' => ['city' => 'Cincinnati' , 'state' => 'OH'],
  'browns' => ['city' => 'Cleveland' , 'state' => 'OH'],
  'cowboys' => ['city' => 'Arlington' , 'state' => 'TX'],
  'broncos' => ['city' => 'Denver' , 'state' => 'CO'],
  'lions' => ['city' => 'Detroit' , 'state' => 'MI'],
  'packers' => ['city' => 'Green Bay' , 'state' => 'WI'],
  'texans' => ['city' => 'Houston' , 'state' => 'TX'],
  'colts' => ['city' => 'Indianapolis' , 'state' => 'IA'],
  'jaguars' => ['city' => 'Jacksonville' , 'state' => 'FL'],
  'chiefs' => ['city' => 'Kansas City' , 'state' => 'MO'],
  'raiders' => ['city' => 'Oakland' , 'state' => 'CA'],
  'chargers' => ['city' => 'San Diego' , 'state' => 'CA'],
  'rams' => ['city' => 'Los Angeles' , 'state' => 'CA'],
  'dolphins' => ['city' => 'Miami' , 'state' => 'FL'],
  'vikings' => ['city' => 'Minneapolis' , 'state' => 'MN'],
  'saints' => ['city' => 'New Orleans' , 'state' => 'LA'],
  'giants' => ['city' => 'East Rutherford' , 'state' => 'NJ'],
  'jets' => ['city' => 'East Rutherford' , 'state' => 'NJ'],
  'eagles' => ['city' => 'Philadelphia' , 'state' => 'PA'],
  'steelers' => ['city' => 'Pittsburgh' , 'state' => 'PA'],
  '49ers' => ['city' => 'Santa Clara' , 'state' => 'CA'],
  'seahawks' => ['city' => 'Seattle' , 'state' => 'WA'],
  'buccaneers' => ['city' => 'Tampa' , 'state' => 'FL'],
  'titans' => ['city' => 'Nashville' , 'state' => 'TN'],
  'redskins' => ['city' => 'Landover' , 'state' => 'MD']
];
  return $locations[$team];
}

/**
 * Check a team node for a certain season to see if
 * the team has a different name that season.
 */
function _check_name_alts($team_node, $season) {
  // See if the team node has any alternate names.
  if (!$team_node->field_alternate_team_name->isEmpty()) {
    foreach ($team_node->field_alternate_team_name->referencedEntities() as $alt) {
      if ($alt->field_season->value == $season) {
        // If we have an alt for this season, return it.
        return $alt->field_alternate_name->value;
      }
    }
  }
  // Nothing found, return null.
  return $team_node->label();
}
