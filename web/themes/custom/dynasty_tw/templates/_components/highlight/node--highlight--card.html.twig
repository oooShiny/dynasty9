{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{% if td == 1 %}
  {% set bg_color = 'bg-red-pats' %}
{% else %}
  {% set bg_color = 'bg-blue-pats' %}
{% endif %}

<div class="w-1/2 md:w-1/3 lg:w-1/4 {{ bg_color}} m-3 shadow-lg max-h-80 flex flex-col justify-between">
  {% if content.field_muse_video_id|render %}
    {{ content.field_muse_video_id }}
  {% elseif content.field_gfycat_id|render %}
    {{ content.field_gfycat_id }}
  {% endif %}
  <div class="p-2 {{ bg_color}} text-white flex flex-col gap-4 justify-between">
    <div><a href="{{ url }}">{{ label }}</a></div>
    <div class="flex justify-between">
      <p class="badge badge-outline">{{ content.field_game }}</p>
      <div class="flex">
        {% if content.field_video_file_id|render %}
          <a href="https://cdn.muse.ai/w/{{ video_file }}/videos/video.mp4" download>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
              <style>
                tspan { white-space:pre }
              </style>
              <g >
                <path class="fill-white" d="M11.24 13.59L11.24 4C11.24 3.45 11.69 3 12.24 3C12.8 3 13.24 3.45 13.24 4L13.24 13.59L15.78 11.05C16.17 10.66 16.8 10.66 17.19 11.05C17.58 11.44 17.58 12.07 17.19 12.46L12.95 16.71C12.56 17.1 11.93 17.1 11.54 16.71L7.29 12.46C6.9 12.07 6.9 11.44 7.29 11.05C7.68 10.66 8.32 10.66 8.71 11.05L11.24 13.59ZM2 14C2 13.45 2.45 13 3 13C3.55 13 4 13.45 4 14C4 14.98 4 17.39 4 18C4 18.55 4.45 19 5 19L19 19C19.55 19 20 18.55 20 18L20 14C20 13.45 20.45 13 21 13C21.55 13 22 13.45 22 14L22 18C22 19.66 20.66 21 19 21L5 21C3.34 21 2 19.66 2 18C2 17.39 2 14.98 2 14Z" />
              </g>
            </svg>

          </a>
        {% endif %}
      </div>
    </div>
  </div>
</div>
