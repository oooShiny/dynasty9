<?php

use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\views\ViewExecutable;


/**
 * Implements hook_theme_suggestions_page_alter().
 */
function dynasty_tw_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $suggestions[] = 'page__' . $node->bundle();
  }
}

/**
 * Implements hook_preprocess_field().
 */
function dynasty_tw_preprocess_field(&$variables) {

  // Add styles to specific fields.
  switch ($variables['field_name']) {
    case 'body':
      $variables['attributes']['class'][] = 'p-6';
      break;
    case 'field_game_video':
      for ($i = 0; $i < 4; $i++) {
        if (isset($variables['element'][$i])) {
          $url = parse_url($variables['element'][$i]['#context']['value']);
          $path = explode('/', $url['path']);
          $variables['video'][] = [
            'video_type' => $url['host'],
            'video_id' => end($path)
          ];
        }
      }
      break;
    case 'field_highlight_video_url':
      $variables['video_id'] = $variables["element"][0]["#context"]["value"];
      break;
    case 'field_mp3':
      $link_array = parse_url($variables['element'][0]['#context']['value']);
      $path_array = explode('/', $link_array['path']);
      $variables['mp3'] = $path_array[6];
      $variables['mp3_url'] = $variables['element'][0]['#context']['value'];
      $variables['view_mode'] = $variables['element']['#view_mode'];
      break;
  }
}

/**
 * Implements hook_preprocess_image().
 */
function dynasty_tw_preprocess_image(&$variables) {
  switch ($variables['style_name']) {
    case 'wide':
      $variables['attributes']['class'][] = 'w-full';
  }
}

/**
 * Implements hook_preprocess_links().
 */
function dynasty_tw_preprocess_links(&$variables) {
  if (isset($variables['links']['node-readmore'])) {
    $variables['links']['node-readmore']['link']['#options']['attributes']['class'][] = 'btn btn-primary';
  }
  if (in_array('inline', $variables['attributes']['class'])) {
    $variables['attributes']['class'][] = 'flex justify-end';
  }
}

/**
 * Implements hook_preprocess_layout().
 */
function dynasty_tw_preprocess_layout(&$variables) {
  $variables['settings'] = isset($variables['content']['#settings']) ? $variables['content']['#settings'] : [];
  $variables['layout'] = isset($variables['content']['#layout']) ? $variables['content']['#layout'] : [];
//  Add width classes to each layout section if set.
  if ($variables['layout']->id() == 'layout_twocol') {
    $widths = [
      '25' => 'md:w-1/4',
      '50' => 'md:w-1/2',
      '75' => 'md:w-3/4',
    ];
    $this_layout = $variables['settings']['layout_paragraphs_section'];
    if (!$this_layout->getEntity()->field_2_column_widths->isEmpty()) {
      $cols = explode('_', $this_layout->getEntity()->field_2_column_widths->value);
      $col_list = ['first', 'second', 'third'];
      foreach ($cols as $key => $col_width) {
        $variables['content']['width'][$col_list[$key]] = $widths[$col_width];
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function dynasty_tw_preprocess_node(&$variables) {
  $node = $variables['node'];

  switch ($node->bundle()) {
    case 'article':
      $variables['attributes']['class'][] = 'article px-5';
      $variables['#attached']['library'][] =  'dynasty_tw/article';
      break;
    case 'highlight':
      $variables['td'] = $node->field_td_scored->value;
      $variables['video_file'] = $node->get('field_video_file_id')->value;
      $variables['muse_id'] = $node->get('field_muse_video_id')->value;
      break;
    case 'game':
      if ($node->get('field_ot')->value == '0') {
        $variables['ot'] = FALSE;
      }
      else {
        $variables['ot'] = TRUE;
      }
      if ($node->get('field_home_away')->value == "Home") {
        $variables['vs'] = 'vs';
      }
      else {
        $variables['vs'] = 'at';
      }
      $game_season = $node->get('field_season')->value;

      // Team name variations.
      $opp = Node::load($node->get('field_opponent')->target_id);
      $variables['team_css'] =  str_replace(' ', '-', strtolower($opp->label()));
      $opp_name = _check_name_alts($opp, $game_season);
      $name_array = explode(' ', $opp_name);

      $team_short = end($name_array);
      $variables['opp_short'] = $team_short;
      $variables['opp_name'] = $opp_name;
      $variables['playoff'] = FALSE;
      $variables['week_css'] = strtolower(str_replace(' ', '-', $node->get('field_week')->entity->label()));
      if (str_contains($variables['week_css'], 'afc') ||
        $variables['week_css'] == 'super-bowl') {
        $variables['playoff'] = TRUE;
      }


      // Create pro-football-reference and NFL Gamepass links.
      $game_date = new DateTime($node->get('field_date')->value);
      $gp_date = $game_date->format('mdY');
      $gp_opp = explode(' ', $opp->getTitle());
      if ($node->get('field_home_away')->value == 'Home') {
        $gp_home = 'patriots';
        $gp_away = strtolower(end($gp_opp));
        $variables['schema_city'] = 'Foxboro';
        $variables['schema_state'] = 'MA';
      }
      else {
        $gp_home = strtolower(end($gp_opp));
        $gp_away = 'patriots';
        $game_location = _get_team_location(strtolower($team_short));
        $variables['schema_city'] = $game_location['city'];
        $variables['schema_state'] = $game_location['state'];
      }
      $variables['season'] = intval($game_season);
      $variables['gamepass_link'] = 'https://gamepass.nfl.com/game/'.$gp_away.'-at-'.$gp_home.'-on-' . $gp_date;

      // Schema.org formatting.
      $variables['schema_date'] = $game_date->format('c');
      $variables['schema_opp'] = $opp->label();
      $variables['schema_name'] = $node->label();

      // Multiple QB stats.
      if (!$node->get('field_other_qbs')->isEmpty()) {
        foreach ($node->field_other_qbs->referencedEntities() as $qb) {
          $qb_node = Node::load($qb->field_qb->target_id);

          $qbs[$qb_node->label()] = [
            'url' => $qb_node->toUrl(),
            'att' => $qb->field_attempts->value,
            'comp' => $qb->field_completions->value,
            'yds' => $qb->field_yards->value,
            'tds' => $qb->field_tds->value,
            'ints' => $qb->field_ints->value,
            'qbr' => $qb->field_qbr->value,
          ];
        }
        $variables['qbs'] = $qbs;
      }
      break;
    case 'podcast_episode':
      $mp3_field = $node->get('field_mp3')->value;
      $link_array = parse_url($mp3_field);
      $path_array = explode('/', $link_array['path']);
      $variables['mp3'] = $path_array[6];
      $variables['ep_art'] = $node->get('field_episode_cover_image')->value;
      $downloads = [];
      foreach ($node->field_monthly_downloads as $paragraph) {
        $dl = $paragraph->entity;
        $dateObj   = DateTime::createFromFormat('!m', $dl->field_month->value);
        $monthName = $dateObj->format('F');
        $downloads[$dl->field_year->value][$dl->field_month->value] = [
          'dls' => $dl->field_downloads->value,
          'month_name' => $monthName
        ];
      }
      // Sort downloads by month.
      $sorted_dls = [];
      foreach ($downloads as $year => $month) {
        ksort($month);
        $sorted_dls[$year] = $month;
      }
      // Sort downloads by year.
      ksort($sorted_dls);
      $variables['downloads'] = $sorted_dls;
      break;
    case 'player':
      $variables['#attached']['library'][] =  'dynasty_tw/muse_video';
      $names = explode(' ', $node->label());
      $variables['lastname'] = end($names);
      break;
    case 'page':
      $variables['#attached']['library'][] =  'dynasty_tw/gfycat';
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function dynasty_tw_preprocess_paragraph(&$variables) {
  $p = $variables['paragraph'];
  // Add styles to specific fields.
  switch ($p->bundle()) {
    case 'section':
      // bg-gray-200|None
      // bg-gray-400 text-white|Gray
      // bg-blue-pats text-white|Blue
      // bg-red-pats text-white|Red
      // section-header
      // header-block
      $variables['bg_color'] = $p->field_background_color->value;
      $variables['full_width'] = $p->field_full_width_section->value ?? null;

      if (!$p->field_2_column_widths->isEmpty()) {
        $widths = [
          '25' => 'w-1/4',
          '50' => 'w-1/2',
          '75' => 'w-3/4',
        ];
        $cols = explode('_', $p->field_2_column_widths->value);
        $variables['widths'] = [
          'first_col' => $widths[$cols[0]],
          'second_col' => $widths[$cols[1]],
        ];

      }
      break;
    case 'text':
      $variables['attributes']['class'][] = 'py-5';
      break;
    case 'article_card':
      $link = $p->field_card_title->uri;
      $url = Url::fromUri($link);
      $variables['card_style'] = $p->field_card_style->value;
      $variables['card_link'] = $url->toString();
      $variables['card_title'] = $p->field_card_title->title;
      break;
    case 'media':
      $parent = $p->getParentEntity()->bundle();
      if ($parent == 'card') {
        $variables['image_css'] = '';
      }
      else {
        $variables['image_css'] = 'rounded-2xl mx-auto';
      }
      $variables['card_img_style'] = $p->get('field_image_size')->target_id;
      $variables['card_media'] = Media::load($p->get('field_media')->target_id);
  }
}

/**
 * Implements hook_views_pre_render().
 */
function dynasty_tw_views_pre_render(ViewExecutable $view) {
  $podcast_views = [
    'transcript_search',
    'podcast_search'
  ];
  if (in_array($view->storage->id(), $podcast_views)) {
    $view->element['#attached']['library'][] = 'dynasty_tw/podcast';
  }
}

/**
 * Implements hook_preprocess_views_view_table().
 */
function dynasty_tw_preprocess_views_view_table(&$variables) {
  $view = $variables['view'];

  if ($view->id() == 'game_search') {
    $wins = 0;
    $losses = 0;
    $score = [
      'pats' => 0,
      'opp' => 0
    ];
    $games = 0;

    // TODO: Get QB stats for each row. Create a table of totals for each QB.
    $qb_stats = [];
    foreach ($view->result as $id => $row) {
      $game = $row->_entity;
      // Check for alternate team names for this row.
      $season = $game->field_season->value;
      $opp = $game->field_opponent->referencedEntities();
      // TODO: Update this so we don't have to check every team every time.
      $opp_name = _check_name_alts($opp[0], $season);
      $markup = $variables['rows'][$id]['columns']['opponent']['content'][0]['field_output']['#markup']->__toString();
      $href_array = explode('"', $markup);
      $new_markup = '<a href="' . $href_array[1] . '" hreflang="en">' . $opp_name . '</a>';
      $variables['rows'][$id]['columns']['opponent']['content'][0]['field_output'] = Drupal\Core\Render\Markup::create($new_markup);

      // Add game results/scores to totals.
      $qb = '';
      foreach ($view->field as $fid => $field) {
        switch ($fid) {
          case 'result':
            $winloss = $field->getValue($row);
            if ($winloss == 'Loss') {
              $losses++;
            }
            elseif ($winloss == 'Win') {
              $wins++;
            }
            $games++;
            break;
          case 'opponent_score':
            $score['opp'] += $field->getValue($row);
            break;
          case 'patriots_score':
            $score['pats'] += $field->getValue($row);
            break;
          case 'starting_qb':
            $qb = $field->getValue($row);
            if (!array_key_exists($field->getValue($row), $qb_stats)) {
              $qb_stats[$field->getValue($row)] = [
                'attempts' => 0,
                'completions' => 0,
                'tds' => 0,
                'ints' => 0
              ];
            }
            break;
          case 'brady_attempts':
            $qb_stats[$qb]['attempts'] += $field->getValue($row);
            break;
          case 'brady_completions':
            $qb_stats[$qb]['completions'] += $field->getValue($row);
            break;
          case 'brady_tds':
            $qb_stats[$qb]['tds'] += $field->getValue($row);
            break;
          case 'brady_ints':
            $qb_stats[$qb]['ints'] += $field->getValue($row);
            break;
        }
      }
    }
    // Get averages and totals.
    $variables['winloss'] = $wins . ' - ' . $losses;
    $variables['winpct'] = $wins/($games);
    $avgscore = [
      'pats' => $score['pats']/$games,
      'opp' => $score['opp']/$games,
    ];
    $variables['avgscore'] = round($avgscore['pats']) . ' - ' . round($avgscore['opp']);
    $variables['games'] = $games;
    $variables['qb_stats'] = $qb_stats;
  }

}




function _check_name_alts($team_node, $season) {
  // See if the team node has any alternate names.
  if (!$team_node->field_alternate_team_name->isEmpty()) {
    foreach ($team_node->field_alternate_team_name->referencedEntities() as $alt) {
      if ($alt->field_season->value == $season) {
        // If we have an alt for this season, return it.
        return $alt->field_alternate_name->value;
      }
    }
  }
  // Nothing found, return null.
  return $team_node->label();
}

function _get_team_location($team) {
  $locations = [
    'cardinals' => ['city' => 'Glendale' , 'state' => 'AZ'],
    'falcons' => ['city' => 'Atlanta' , 'state' => 'GA'],
    'ravens' => ['city' => 'Baltimore' , 'state' => 'MD'],
    'bills' => ['city' => 'Orchard Park' , 'state' => 'NY'],
    'panthers' => ['city' => 'Charlotte' , 'state' => 'NC'],
    'bears' => ['city' => 'Chicago' , 'state' => 'IL'],
    'bengals' => ['city' => 'Cincinnati' , 'state' => 'OH'],
    'browns' => ['city' => 'Cleveland' , 'state' => 'OH'],
    'cowboys' => ['city' => 'Arlington' , 'state' => 'TX'],
    'broncos' => ['city' => 'Denver' , 'state' => 'CO'],
    'lions' => ['city' => 'Detroit' , 'state' => 'MI'],
    'packers' => ['city' => 'Green Bay' , 'state' => 'WI'],
    'texans' => ['city' => 'Houston' , 'state' => 'TX'],
    'colts' => ['city' => 'Indianapolis' , 'state' => 'IA'],
    'jaguars' => ['city' => 'Jacksonville' , 'state' => 'FL'],
    'chiefs' => ['city' => 'Kansas City' , 'state' => 'MO'],
    'raiders' => ['city' => 'Oakland' , 'state' => 'CA'],
    'chargers' => ['city' => 'San Diego' , 'state' => 'CA'],
    'rams' => ['city' => 'Los Angeles' , 'state' => 'CA'],
    'dolphins' => ['city' => 'Miami' , 'state' => 'FL'],
    'vikings' => ['city' => 'Minneapolis' , 'state' => 'MN'],
    'saints' => ['city' => 'New Orleans' , 'state' => 'LA'],
    'giants' => ['city' => 'East Rutherford' , 'state' => 'NJ'],
    'jets' => ['city' => 'East Rutherford' , 'state' => 'NJ'],
    'eagles' => ['city' => 'Philadelphia' , 'state' => 'PA'],
    'steelers' => ['city' => 'Pittsburgh' , 'state' => 'PA'],
    '49ers' => ['city' => 'Santa Clara' , 'state' => 'CA'],
    'seahawks' => ['city' => 'Seattle' , 'state' => 'WA'],
    'buccaneers' => ['city' => 'Tampa' , 'state' => 'FL'],
    'titans' => ['city' => 'Nashville' , 'state' => 'TN'],
    'redskins' => ['city' => 'Landover' , 'state' => 'MD']
  ];
  return $locations[$team];
}
