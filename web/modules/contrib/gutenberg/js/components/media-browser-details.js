/**
 * Generated by a build script. Do not modify.
 * Check orginal .jsx file.
 */
/* eslint-disable */

((wp2, Drupal2, moment2) => {
  const { element, components } = wp2;
  const { Component, Fragment } = element;
  const { TextControl, TextareaControl } = components;
  const customTypes = ["image", "audio", "video"];
  function toSize(bytes) {
    const sizes = ["Bytes", "KB", "MB", "GB", "TB"];
    const value = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)), 10);
    return `${Math.round(bytes / 1024 ** value, 2)} ${sizes[value]}`;
  }
  class MediaBrowserDetails extends Component {
    constructor(args) {
      super(args);
      const { media } = this.props;
      this.state = {
        width: null,
        height: null,
        duration: null,
        title: media.title,
        altText: media.alt,
        caption: media.caption
      };
      this.updateVideo = this.updateVideo.bind(this);
      this.updateAudio = this.updateAudio.bind(this);
    }
    componentDidUpdate() {
      const { onChange } = this.props;
      const { title, altText, caption } = this.state;
      onChange({ title, altText, caption });
    }
    updateVideo(ev) {
      this.setState({
        width: ev.target.videoWidth,
        height: ev.target.videoHeight,
        duration: moment2.unix(ev.target.duration).format("HH:mm:ss")
      });
    }
    updateAudio(ev) {
      this.setState({
        // width: ev.target.videoWidth,
        // height: ev.target.videoHeight,
        duration: moment2.unix(ev.target.duration).format("HH:mm:ss")
      });
    }
    render() {
      const { media } = this.props;
      const { width, height, duration, title, altText, caption } = this.state;
      return /* @__PURE__ */ React.createElement(Fragment, null, media.media_type === "image" && /* @__PURE__ */ React.createElement(Fragment, null, /* @__PURE__ */ React.createElement("figure", null, /* @__PURE__ */ React.createElement("img", { alt: media.media_details.file, src: media.source_url }), /* @__PURE__ */ React.createElement("figcaption", null, media.media_details.file)), /* @__PURE__ */ React.createElement("div", null, `${media.media_details.width} x ${media.media_details.height}`), /* @__PURE__ */ React.createElement("div", null, toSize(media.media_details.filesize)), /* @__PURE__ */ React.createElement(
        TextControl,
        {
          value: title,
          onChange: (value) => this.setState({ title: value }),
          label: "Title"
        }
      ), /* @__PURE__ */ React.createElement(
        TextControl,
        {
          value: altText,
          onChange: (value) => this.setState({ altText: value }),
          label: "Alt text"
        }
      ), /* @__PURE__ */ React.createElement(
        TextareaControl,
        {
          value: caption,
          onChange: (value) => this.setState({ caption: value }),
          label: "Caption"
        }
      )), media.media_type === "video" && /* @__PURE__ */ React.createElement(Fragment, null, /* @__PURE__ */ React.createElement("figure", null, /* @__PURE__ */ React.createElement(
        "video",
        {
          onLoadedData: this.updateVideo,
          controls: true,
          src: media.source_url
        }
      ), /* @__PURE__ */ React.createElement("figcaption", null, media.media_details.file)), /* @__PURE__ */ React.createElement("div", null, `${width} x ${height}`), /* @__PURE__ */ React.createElement("div", null, toSize(media.media_details.filesize)), /* @__PURE__ */ React.createElement("div", null, `${duration}`)), media.media_type === "audio" && /* @__PURE__ */ React.createElement(Fragment, null, /* @__PURE__ */ React.createElement("figure", null, /* @__PURE__ */ React.createElement(
        "audio",
        {
          onLoadedData: this.updateAudio,
          controls: true,
          src: media.source_url
        }
      ), /* @__PURE__ */ React.createElement("figcaption", null, media.media_details.file)), /* @__PURE__ */ React.createElement("div", null, toSize(media.media_details.filesize)), /* @__PURE__ */ React.createElement("div", null, `${duration}`)), !customTypes.includes(media.media_type) && /* @__PURE__ */ React.createElement(Fragment, null, /* @__PURE__ */ React.createElement("div", { className: "filename" }, media.media_details.file), /* @__PURE__ */ React.createElement("div", null, toSize(media.media_details.filesize))));
    }
  }
  window.DrupalGutenberg = window.DrupalGutenberg || {};
  window.DrupalGutenberg.Components = window.DrupalGutenberg.Components || {};
  window.DrupalGutenberg.Components.MediaBrowserDetails = MediaBrowserDetails;
})(wp, Drupal, moment);
