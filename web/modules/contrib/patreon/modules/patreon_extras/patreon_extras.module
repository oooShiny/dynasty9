<?php

/**
 * @file
 * Contains patreon_extras.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Render\BubbleableMetadata;

/**
 * Implements hook_help().
 */
function patreon_extras_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the patreon_extras module.
    case 'help.page.patreon_extras':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Extra functionality related to Patreon.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 */
function patreon_extras_cron() {
  $config = \Drupal::config('patreon_extras.settings');
  $last_run = $config->get('patreon_extras_pledge_data_last_update');
  $now = time();

  // Only update data daily.
  if ($now - $last_run > 86400) {
    patreon_extras_update_pledge_data();
  }
}

/**
 * Helper to collect data about pledges from Patreon.
 */
function patreon_extras_update_pledge_data() {
  $config = \Drupal::service('config.factory')
    ->getEditable('patreon_extras.settings');

  /** @var \Drupal\patreon_user\PatreonUserService $service */
  $service = \Drupal::service('patreon_user.api');
  $count = $amount = 0;

  foreach (patreon_extras_get_all_tokens() as $token) {
    if (isset($token->user_patreon_token_value)) {
      $service->setToken($token->user_patreon_token_value);

      if ($data = $service->fetchUser()) {
        if ($status = $service->getValueByKey($data, ['included', 0, 'attributes', 'patron_status'])) {
          if ($status == 'active_patron') {
            $count++;

            if ($cents = $service->getValueByKey($data, [
              'included',
              0,
              'attributes',
              'currently_entitled_amount_cents'
            ])) {
              $amount += $cents;
            }
          }
        }
      }
    }
  }

  $config->set('patreon_extras_pledge_count', $count);
  $config->set('patreon_extras_pledge_amount', $amount);
  $config->set('patreon_extras_pledge_data_last_update', time())
    ->save();
}

/**
 * Helper to load all tokens for signed up users.
 *
 * @return mixed
 */
function patreon_extras_get_all_tokens() {
  return \Drupal::database()->query('SELECT user_patreon_token_value FROM {user__user_patreon_token}')->fetchAll();
}

/**
 * Implements hook_token_info().
 */
function patreon_extras_token_info() {
  $info['pledge_count'] = [
    'name' => t('Pledge Count'),
    'description' => t('The number of pledges currently made.'),
  ];
  $info['pledge_amount'] = [
    'name' => t('Pledge Amount'),
    'description' => t('The current amount of pledges in $USD'),
  ];
  return [
    'types' => [
      'patreon' => [
        'name' => t('Patreon'),
        'description' => t('Tokens related to Patreon data.'),
      ],
    ],
    'tokens' => [
      'patreon' => $info,
    ],
  ];
}

/**
 * Implements hook_tokens().
 */
function patreon_extras_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  $sanitize = !empty($options['sanitize']);
  if ($type == 'patreon') {
    $config = \Drupal::config('patreon_extras.settings');

    // If we've never pulled in data, try it now.
    if ($config->get('patreon_extras_pledge_data_last_update') == 0) {
      patreon_extras_update_pledge_data();
    }

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'pledge_count':
          $replacements[$original] = $config->get('patreon_extras_pledge_count');
          break;

        case 'pledge_amount':
          $stored = $config->get('patreon_extras_pledge_amount');
          $replacements[$original] = ($stored == 0) ? '$0.00' : '$' . $stored / 100;
          break;

      }
    }

    if ($sanitize) {
      foreach ($replacements as $token => $value) {
        $replacements[$token] = Xss::filter($value);
      }
    }
  }

  return $replacements;
}
