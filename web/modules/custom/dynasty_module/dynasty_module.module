<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\file\Entity\File;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\Entity\Node;
use Drupal\dynasty_module\DynastyHelpers;
use GuzzleHttp\Exception\RequestException;

/**
 * Calculating Brady QB Rating field for game nodes.
 */
function dynasty_module_update_8001() {
  $games = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
    'type' => 'game',
    'field_brady_played' => TRUE,
  ]);

  foreach ($games as $game) {
    $att = $game->get('field_brady_attempts')->value;
    $comp = $game->get('field_brady_completions')->value;
    $int = $game->get('field_brady_ints')->value;
    $td = $game->get('field_brady_tds')->value;
    $yds = $game->get('field_brady_yards')->value;

    $rating = DynastyHelpers::passer_rating($att, $comp, $yds, $td, $int);
    $game->set('field_passer_rating', $rating);
    $game->save();
  }
}

/**
 * Setting empty download fields to zero in Podcast Episodes.
 */
function dynasty_module_update_8002() {
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
    'type' => 'podcast_episode',
  ]);

  foreach ($nodes as $node) {
    foreach ($node->get('field_monthly_downloads')->referencedEntities() as $p) {
      if ($p->get('field_downloads')->isEmpty()) {
        $p->set('field_downloads', 0);
        $p->save();
      }
    }
  }
}

/**
 * Re-save all Highlights to save play of the game data.
 */
function dynasty_module_update_8003() {
  // Get an array of all 'article' node ids.
  $play_nids = \Drupal::entityQuery('node')
    ->condition('type', 'highlight')
    ->execute();

  // Load all the articles.
  $plays = Node::loadMultiple($play_nids);
  foreach ($plays as $play) {
    if ($play->field_play_of_the_game->isEmpty()) {
      $play->set('field_play_of_the_game', 0);
    }
    $play->save();
  }
}

/**
 * Set Tom Brady as starting QB if "Brady Started" field is set.
 */
function dynasty_module_update_8004() {
  $games = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
    'type' => 'game',
    'field_brady_played' => TRUE,
  ]);


  foreach ($games as $game) {
    $game->field_starting_qb->target_id = 272;
    $game->save();
  }
}

/**
 * Set "Brady Era" field to true for games between 2001-2019.
 */
function dynasty_module_update_8005() {
  $games = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
    'type' => 'game',
  ]);


  foreach ($games as $game) {
    if ($game->field_season->value > 2000 || $game->field_season->value < 2020)
      $game->set('field_brady_played', 1);
      $game->save();
  }
}
function dynasty_module_theme($existing, $type, $theme, $path) {
  return [
    'footer_seasons_block' => [
      'variables' => [
        'seasons' => ''
      ]
    ],
    'prev_next_block' => [
      'variables' => [
        'previous' => '',
        'next' => '',
      ]
    ],
    'latest_podcast_block' => [
      'variables' => [
        'episode' => ''
      ]
    ],
    'record_vs_nfl_block' => [
      'variables' => [
        'records' => ''
      ]
    ],
    'total_podcast_downloads_block' => [
      'variables' => [
        'downloads' => '',
        'months' => ''
      ]
    ],
    'top_10_podcast_block' => [
      'variables' => [
        'downloads' => ''
      ]
    ],
    'on_this_day_block' => [
      'variables' => [
        'games' => ''
      ]
    ],
    'pats_calendar' => [
      'variables' => [
        'months' => '',
        'monthnames' => ''
      ]
    ],
    'brady_td_viz' => [
      'variables' => []
    ],
    'team_games_table' => [
      'variables' => [
        'games' => '',
        'totals' => '',
        'opp' => '',
        'offset' => ''
      ]
    ],
    'brady_total_tds' => [
      'variables' => [
        'players' => '',
        'playercount' => '',
        'quarters' => '',
        'q_count' => '',
        'tdyards' => '',
        'tdposition' => '',
        'alltds' => ''
      ]
    ],
  ];
}
/**
 * Implements hook_entity_presave().
 */
function dynasty_module_entity_presave(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'podcast_episode':
      if (!$entity->field_season->isEmpty() && !$entity->field_episode->isEmpty()) {
        // Get values from podcast node.
        $season = $entity->field_season->value;
        $week = $entity->field_episode->value;
        // Adjust playoff episode weeks to actual week numbers.
        if ($week > 17) {
          $title = $entity->label();
          if (strpos($title, 'Wildcard') !== FALSE) {
            $week = 18;
          }
          elseif (strpos($title, 'Divisional') !== FALSE) {
            $week = 19;
          }
          elseif (strpos($title, 'Championship') !== FALSE) {
            $week = 20;
          }
          elseif (strpos($title, 'Super') !== FALSE) {
            $week = 21;
          }
        }
        // Map podcast week to game week taxonomy term.
        $tids = \Drupal::entityQuery('taxonomy_term')
          ->condition('vid', 'week')
          ->execute();
        $terms = Term::loadMultiple($tids);
        $weeks = [];
        foreach ($terms as $term) {
          $name = $term->label();
          if (strpos($term->label(), 'Week') !== FALSE) {
            $week_array = explode(' ', $term->label());
            $w = end($week_array);
            $weeks[$w] = $term->id();
          }
          else {
            switch ($term->label()) {
              case 'Wildcard':
                $weeks[18] = $term->id();
                break;
              case 'AFC Divisional Round':
                $weeks[19] = $term->id();
                break;
              case 'AFC Conference Championship':
                $weeks[20] = $term->id();
                break;
              case 'Super Bowl':
                $weeks[21] = $term->id();
                break;
            }
          }
        }
        // Find game from season + week.
        $game = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
          'type' => 'game',
          'field_season' => $season,
          'field_week' => $weeks[$week]
        ]);
        $game_ref = reset($game);
        if ($game_ref) {
          $entity->field_game->target_id = $game_ref->id();
        }
      }
      // Convert MP3 URL to the one Acast uses for their iFrames.
      if (!$entity->field_mp3->isEmpty()) {
        $mp3 = parse_url($entity->field_mp3->value);
        $path = explode('/', $mp3['path']);
        $entity->field_iframe->value = 'https://embed.acast.com/' . $path[4];
      }
      break;
    case 'highlight':
      // Automatically add game info to game fields.
      if (!$entity->field_game->isEmpty()) {
        $game = \Drupal::entityTypeManager()->getStorage('node')->load($entity->field_game->target_id);
        $entity->field_season->value = $game->field_season->value;
        $entity->field_week->target_id = $game->field_week->target_id;
        $entity->field_opponent->target_id = $game->field_opponent->target_id;
      }
      // Format muse video ID field if a link is posted.
      if ($entity->field_video_file_id->isEmpty()) {
        $video_id = $entity->field_muse_video_id->value;
        $url = 'https://muse.ai/api/files/videos/' . $video_id;
        $client = \Drupal::httpClient();
        $data = NULL;
        try{
          $response = $client->request('GET', $url, [
            'headers' => ['Key' => 'vvjguqSQzGQu9cJXtRg1QfI85f7b9e4f']
          ]);
          $data = $response->getBody()->getContents();
          $video_data = json_decode($data, true);
          $entity->field_video_file_id->value = $video_data['fid'];
        }
        catch (RequestException $e) {
          watchdog_exception('patsfilm', $e->getMessage());
        }

      }
      elseif (filter_var($entity->field_video_file_id->value, FILTER_VALIDATE_URL)) {
        $url_array = parse_url($entity->field_video_file_id->value);
        $path_array = explode('/', $url_array['path']);
        $entity->field_video_file_id->value = $path_array[2];
      }

      // Format play description automatically based on other fields.
      $play_desc = [];
      if (!$entity->field_yards_gained->isEmpty()) {
        $play_desc['yards'] = $entity->get('field_yards_gained')->value . ' yard';
      }
      else {
        $play_desc['yards'] = '';
      }

      if (!$entity->field_play_type->isEmpty()) {
        $play_desc['type'] = Term::load($entity->field_play_type->target_id)->get('name')->value;
        foreach ($entity->field_players_involved->referencedEntities() as $player) {
          $play_desc['players'][] = $player->label();
        }
      }
      $description = $play_desc['yards'] . ' ' . $play_desc['type'];
      if ($play_desc['type'] == 'Pass') {
        $description .= ' from ';
        $count = count($play_desc['players']);
        foreach ($play_desc['players'] as $player) {
          if (--$count <= 0) {
            $description .= $player;
          }
          else {
            $description .= $player. ' to ';
          }
        }
      }
      else {
        $description .= ' by ';
        $count = count($play_desc['players']);
        foreach ($play_desc['players'] as $player) {
          if (--$count <= 0) {
            $description .= $player;
          }
          else {
            $description .= $player. ' and ';
          }
        }
      }
      $entity->field_play_description->value = $description;
      break;
    case 'game':
      // Set month field from date.
      if (!is_null($entity->field_date->value)) {
        $date = $entity->field_date->value;
        $entity->field_month->value = date('F', strtotime($date));
        // Weekday field.
        $entity->field_weekday->value = date('l', strtotime($date));
      }

      // Point differential field.
      if (!is_null($entity->field_patriots_score->value)) {
        $pats = $entity->field_patriots_score->value;
        $opp = $entity->field_opponent_score->value;
        $entity->field_score_differential->value = $pats - $opp;
      }
      break;
  }
}

/**
 * Implements hook_cron().
 * Tweets out a random highlight node.
 */
function dynasty_module_cron() {
  $plays = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties([
      'type' => 'highlight'
    ]);
  $highlights = [];
  foreach ($plays as $play) {
    if ($play->field_tweeted->isEmpty() || $play->field_tweeted->value !== TRUE) {
      $highlights[] =$play->id();
    }
  }

  $key = array_rand($highlights);

  $tweet_play = $highlights[$key];
  $url = $plays[$tweet_play]->toUrl()->setAbsolute()->toString();
  $tweet_title = $plays[$tweet_play]->label();
  $video_id = $plays[$tweet_play]->get('field_video_file_id')->value;
  $muse_url = 'https://cdn.muse.ai/w/'.$video_id.'/videos/video.mp4';

  // Save video locally so we can send it to Twitter.
  $video_file = system_retrieve_file($muse_url);
  $file = File::create(['uri' => $video_file]);
  $file->save();
  $local_uri = $file->getFileUri();

  $game = '';
  $opp = '';
  foreach ($plays[$tweet_play]->field_game->referencedEntities() as $g) {
    $game = $g->label();
    foreach ($g->field_opponent->referencedEntities() as $o) {
      $opp_arr = explode(' ', $o->label());
      $opp = end($opp_arr);
    }
  }

  $tweet_text = 'A Random Dynasty Highlight:'
    . chr(13) . chr(10)
    . chr(13) . chr(10) .
    $plays[$tweet_play]->label() . ' vs ' . $opp . ' in ' . $game
    . chr(13) . chr(10)
    . chr(13) . chr(10) .
    $url
    . chr(13) . chr(10)
    . chr(13) . chr(10) .
  '#Patriots #Dynasty';

  $tweet = [
    'status' => $tweet_text,
    'media_paths' => [$local_uri]
  ];
  // Create and post manager instances.
  $client = \Drupal::service('plugin.network.manager')->createInstance('social_post_twitter')->getSdk();
  $post_manager = \Drupal::service('twitter_post.manager');

  // Get accounts for the current user.
  $accounts = \Drupal::service('social_post.user_manager')->getAccounts('social_post_twitter', 1);

  foreach ($accounts as $account) {
    // Set OAuth token for the account.
    $token = json_decode($account->getToken());
    $client->setOauthToken($token->oauth_token, $token->oauth_token_secret);

    // Make a post to Twitter with the account!
    $post_manager->setClient($client)->doPost($tweet);
  }

  // Clean up after the highlight has been tweeted.
  $plays[$tweet_play]->field_tweeted = 1;
  $file->delete();

}
